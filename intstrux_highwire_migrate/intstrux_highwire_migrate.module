<?php

/**
 * @file
 * Defines intstrux highwire migrate imports.
 */


/**
 * Implements hook_menu().
 */
function intstrux_highwire_migrate_menu() {
  $items = array();
  
  $items['admin/config/content/highwire/migrate'] = array(
    'title' => 'Migrate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intstrux_highwire_migrate_form'),
    'access arguments' => array('administer intstrux highwire settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'intstrux_highwire_migrate.default.inc',
  );
  
  $items['admin/config/content/highwire/migrate/default'] = array(
    'title' => 'Migrate',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  
  $items['admin/config/content/highwire/migrate/verify'] = array(
    'title' => 'Verify',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intstrux_highwire_migrate_verify_form'),
    'access arguments' => array('administer intstrux highwire settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'intstrux_highwire_migrate.verify.inc',  
  );
  
  $items['admin/config/content/highwire/migrate/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intstrux_highwire_migrate_import_form'),
    'access arguments' => array('administer intstrux highwire settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'intstrux_highwire_migrate.import.inc',
  );
  
  $items['admin/config/content/highwire/migrate/date'] = array(
    'title' => 'Migrate Dates',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intstrux_highwire_migrate_date_form'),
    'access arguments' => array('administer intstrux highwire settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'file' => 'intstrux_highwire_migrate.date.inc',
  );
  
  return $items;
}

function intstrux_highwire_migrate_search($title) {
  if($title) {
    
    $args = array(
      'path' => 'opensearch/results',
      'params' => array(
        'v' => '1', // required value is 1
        'cql' => 'dc.title = (' . $title . ')', // the searchTerms CQL search query, search by title
        'type' => 'json' // output should be returned in JSON format.
      ),
    );  
      
      
    if($result = intstrux_highwire_request($args)) {
      if(isset($result['atom:feed']['atom:entry'])) {
        $entries = $result['atom:feed']['atom:entry'];
        if($entry = $entries[0]) {
          $article_id = intstrux_highwire_parse_doi($entry);
          return $article_id;
        }
      }        
    }
  } 
  
  return FALSE;
}

function intstrux_highwire_migrate_search_by_volume($volume, $start = 0, $count = 10) {
  
  if($volume && is_numeric($volume)) {
    $args = array(
      'path' => 'opensearch/results',
      'params' => array(
        'v' => '1', // required value is 1
        'cql' => 'bib.volume = (' . $volume . ')', // the searchTerms CQL search query, search by title
        'type' => 'json', // output should be returned in JSON format.
        'count' => $count, // display count result per page
        'start' => $start, // starting at a specified index.
      ),
    ); 
    
    if($result = intstrux_highwire_request($args)) {
      if(isset($result['atom:feed'])) {
        return $result['atom:feed'];  
      }  
    }
  }  
    
  return FALSE;  
}

function intstrux_highwire_migrate_taxonomy($term_name, $vocabulary_machine_name) {
  $term = taxonomy_get_term_by_name($term_name, $vocabulary_machine_name);
  $voc = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
  $tid = 0;
  
  if(empty($term) && $voc) {
    $_term = new stdClass();  
    $_term->name = $term_name;
    $_term->vid = $voc->vid;
    $_term->description = '';
    $_term->format = 'plain_text';
    if($saved = taxonomy_term_save($_term)) {
      $tid = $_term->tid;
    }
  } elseif($term) {
    $term = reset($term);  
    $tid = $term->tid;  
  }
  
  return $tid;
}