<?php 

/**
 * @file
 * Intstrux highwire module.
 */
 
//testing 
function intstrux_highwire_init() {
  //nothing
}

 /**
 * Implements hook_menu().
 */
function intstrux_highwire_menu() {
  $items = array();
  
  $items['admin/config/content/highwire'] = array(
    'title' => 'HighWire settings',
    'description' => 'Configure HighWire integration, api keys',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intstrux_highwire_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer intstrux highwire settings'),
    'file' => 'intstrux_highwire.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function intstrux_highwire_permission() {
  return array(
    'administer intstrux highwire settings' => array(
      'title' => t('Administer HighWire'),
    ),
  );
}

/**
 * Return the path to the coreylib library.
 *
 * The library is available from https://github.com/collegeman/coreylib/.
 *
 * @return string
 *   The path to the coreylib.php file.
 */
function intstrux_highwire_coreylib_path() {
  $path = &drupal_static(__FUNCTION__);

  if (!isset($path)) {
    if (!($path = variable_get('intstrux_highwire_coreylib_path', FALSE))) {
      $files = drupal_system_listing('/^coreylib\.php$/', 'libraries',
                                     'filename', 0);
      if (isset($files['coreylib.php'])) {
        $path = dirname($files['coreylib.php']->uri);
        variable_set('intstrux_highwire_coreylib_path', $path);
      }
    }
  }

  return $path;
}

/**
 * Initializes the HighWire API and returns an instance of the object.
 *
 * @param string $url
 *   An optional URL instead of the stored one.
 * @param string $path
 *   An optional path.
 * @param string $key
 *   An optional API key instead of the stored one.
 * @return coreylib
 *   Instance of the HighWire coreylib API or FALSE if fails to initialize.
 */
function intstrux_highwire_initialize($url = NULL, $path = NULL, $key = NULL) {

  if(empty($url)) {
    $url = variable_get('intstrux_highwire_api_url', '');
  }

  if (empty($key)) {
    $key = variable_get('intstrux_highwire_api_key', '');
  }
  
  if (empty($url)) {
    drupal_set_message(t('Cannot initialize HighWire API URL. Contact site administrators.'), 'error');
    watchdog('intstrux_highwire', 'HighWire API URL not found, cannot initialize HighWire API.', array(), WATCHDOG_ERROR);
    return FALSE;
  }
  
  if (empty($key)) {
    drupal_set_message(t('Cannot initialize HighWire API. Contact site administrators.'), 'error');
    watchdog('intstrux_highwire', 'HighWire API key not found, cannot initialize HighWire API.', array(), WATCHDOG_ERROR);
    return FALSE;
  }
  
  if(file_exists(intstrux_highwire_coreylib_path() . '/coreylib.php')) {
    include_once(intstrux_highwire_coreylib_path() . '/coreylib.php');
    
    $arr_url = parse_url($url);

    if(!isset($arr_url['path'])) {
      $path = (!empty($path))? $path : '';
      $url = $url . '/' . $path;
    }

    $hw = new clApi($url);
    $hw->param('key', $key);

    return $hw;
  }
  
  return false;
}

/**
 * Verifies the HighWire API key.
 */
function intstrux_highwire_verify_key($url = NULL, $key = NULL) {
  $hw = intstrux_highwire_initialize($url, NULL, $key);
  
  /* API key validation logic */
  
  return true;
}

/**
 * Loads HighWire article from HighWire Press API.
 *
 * @param $article_id
 *
 * @return $article
 * Article object or FALSE if article not found.
 */
function intstrux_highwire_article_load($article_id) {
  $cache = cache_get('hw:article:' . $article_id, 'cache');
  if (isset($cache->data['atom:entry'])) {
    return $cache->data;
  }
  else {
    $hw = intstrux_highwire_initialize(NULL, 'content');

    if($hw) {
      // PubMed ID
      $hw->param('pmid', $article_id);
      // output should be returned in JSON format.
      $hw->param('type', 'json');
      // set cache expiration
      $hw->parse(variable_get('intstrux_highwire_cache_lifetime', -1));

      $article = $hw ? drupal_json_decode($hw->getContent()) : NULL;

      if (isset($article['atom:entry'])) {
        cache_set('hw:article:' . $article_id, $article, 'cache', $_SERVER['REQUEST_TIME'] + 300);
        return $article;
      }
    }
  }
  return FALSE;
}

function intstrux_highwire_article_content_load($article_id, $view = 'abstract', $type = 'html') {
  $cache = cache_get("hw:article:{$view}:{$type}:" . $article_id, 'cache');
  if ($cache) {
    return $cache->data;
  } else {
    if($article = intstrux_highwire_article_load($article_id)) {
      if($article_url = intstrux_highwire_parse_link($article['atom:entry'], $view, $type)){
        $hw = intstrux_highwire_initialize($article_url);

        if($hw) {
          // set cache expiration
          $hw->parse(variable_get('intstrux_highwire_cache_lifetime', -1));
          // view content
          if($content = $hw->getContent()) {
            cache_set("hw:article:{$view}:{$type}:" . $article_id, $content, 'cache', $_SERVER['REQUEST_TIME'] + 300);
            return $content;
          }
        }
      } else {
        return t('No !view content with this article', array('!view' => $view));
      }
    }
  }
  return FALSE;
}

/**
 * Parse a field value in form of "title [id:123]" and return 123
 *
 * @param $id
 *   Video ID in form of "title [id:123]".
 * @return
 *   Int value of the ID or NULL if not found.
 */
function intstrux_highwire_parse_id($id) {
  preg_match('/\[id:([^\[]*)\]$/', $id, $matches);
  if (count($matches) == 2) {
    return $matches[1];
  }
  return NULL;
}

/**
 * Parse PubMed ID
 *
 * @param $entry
 *   Article array entry.
 * @return
 *   Int value of the pmid or NULL if not found.
 */
function intstrux_highwire_parse_pmid($entry) {
  foreach($entry['nlm:article-id'] as $articleId) {
    if($articleId['@pub-id-type'] == 'pmid') {
      $pmid = $articleId['$'];
      return $pmid;
    }
  }
  return NULL;
}

/**
 * Parse atom:link
 *
 * @param $entry
 *   Article array entry.
 * @param $view
 *   Link view: precis, abstract, full
 * @param $type
 *   Link file type: html, xml, pdf
 * @return
 *   String value of atom:link or NULL if not found.
 */
function intstrux_highwire_parse_link($entry, $view, $type) {
  foreach($entry['atom:link'] as $link) {
    if(strstr($link['@href'], "$view.$type") == "$view.$type") {
      return $link['@href'];
    }
  }
  return NULL;
}

/**
 * Parse content
 */
function intstrux_highwire_parse_content($element, $attr, $value, $content) {
  $attr = preg_quote($attr);
  $value = preg_quote($value);

  $tag_regex = '/<'.$element.'[^>]*'.$attr.'="'.$value.'">(.*?)<\\/'.$element.'>/si';

  preg_match($tag_regex, $content, $matches);
  return $matches[1];
}

/**
 * Remove tag
 */
function intstrux_highwire_remove_tag($element, $attr, $value, $content) {
  $attr = preg_quote($attr);
  $value = preg_quote($value);
  return preg_replace('!<'.$element.'\s+'.$attr.'="'.$value.'">.*?</'.$element.'>!is', '', $content);
}
