<?php 

/**
 * @file
 * Intstrux highwire module.
 */
 
//testing 
function intstrux_highwire_init() {
  //nothing
}

 /**
 * Implements hook_menu().
 */
function intstrux_highwire_menu() {
  $items = array();
  
  $items['admin/config/content/highwire'] = array(
    'title' => 'HighWire settings',
    'description' => 'Configure HighWire integration, api keys',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intstrux_highwire_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer intstrux highwire settings'),
    'file' => 'intstrux_highwire.admin.inc',
  );
  
  $items['admin/config/content/highwire/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer intstrux highwire settings'),
    'weight' => -10,
  );
  
  return $items;
}

/**
 * Verifies the HighWire API key.
 */
function intstrux_highwire_verify_key($url, $key) {
  
  /* API key validation logic */
  
  return true;
}

function intstrux_highwire_request($args = array(), $options = array()) {
      
  // Merge in defaults.
  $args += array(
    'url' => '',
    'path' => '',
    'key' => '',
    'cache' => -1, // disabled
    'params' => array(),
  );  
    
  if(empty($args['url'])) {
    $args['url'] = variable_get('intstrux_highwire_api_url', '');
  }
  
  if(empty($args['url'])) {
    drupal_set_message(t('Cannot initialize HighWire API URL. Contact site administrators.'), 'error');
    watchdog('intstrux_highwire', 'HighWire API URL not found, cannot initialize HighWire API.', array(), WATCHDOG_ERROR);
    return FALSE;
  }
  
  if(empty($args['key'])) {
    $args['key'] = variable_get('intstrux_highwire_api_key', '');
  }
  
  if(empty($args['key'])) {
    drupal_set_message(t('Cannot initialize HighWire API. Contact site administrators.'), 'error');
    watchdog('intstrux_highwire', 'HighWire API key not found, cannot initialize HighWire API.', array(), WATCHDOG_ERROR);
    return FALSE;
  }
  
  if($args['cache'] > 0) {
    $args['cache'] = variable_get('intstrux_highwire_cache_lifetime', -1);
  }
  
  $parsed_url = parse_url($args['url']);
  
  // check if url has path
  if(!isset($parsed_url['path'])) {
    $path = (!empty($args['path']))? $args['path'] : '';
    $args['url'] = $args['url'] . '/' . $path;
  }
  
  // full url
  $url = url($args['url'], $options + array('query' => array('key' => $args['key']) + $args['params'])); 
  
  // HTTP request.
  $request = drupal_http_request($url);
  
  if($request->headers['content-type'] == 'application/json') {
    $result = drupal_json_decode($request->data);  
  } else {
    $result = $request->data;
  }
      
  return $result;
}

/**
 * Loads HighWire article from HighWire Press API.
 *
 * @param $article_id
 * 
 * @param $by
 *   Article identifier; accepts doi and pmid
 * 
 * @return $article
 * Article object or FALSE if article not found.
 */
function intstrux_highwire_article_load($article_id, $by = 'doi') {
    
  if(($by != 'doi') && ($by != 'pmid')) {
    return FALSE;
  }
    
  $cache = cache_get('hw:article:' . $by . ':' . $article_id, 'cache_highwire');
  if (isset($cache->data['atom:entry'])) {
    return $cache->data;
  }
  else {
    $args = array(
      'path' => 'content',
      'params' => array(
        $by => $article_id, // doi or pmid
        'type' => 'json', // output should be returned in JSON format.
      ),
    );
    
    $article = intstrux_highwire_request($args);

    if($article && isset($article['atom:entry'])) {
      cache_set('hw:article:' . $by . ':' . $article_id, $article, 'cache_highwire', $_SERVER['REQUEST_TIME'] + variable_get('intstrux_highwire_cache_lifetime', 300));
      return $article;
    }
  }
  return FALSE;
}

function intstrux_highwire_article_content_load($article_id, $view = 'abstract', $type = 'html') {
  $cache = cache_get("hw:article:{$view}:{$type}:" . $article_id, 'cache_highwire');
  if ($cache && $cache->expire > $_SERVER['REQUEST_TIME']) {
    return $cache->data;
  } else {
    $by = (is_numeric($article_id))? 'pmid' : 'doi';
    if($article = intstrux_highwire_article_load($article_id, $by)) {
      if($article_url = intstrux_highwire_parse_link($article['atom:entry'], $view, $type)){
        if($content = intstrux_highwire_request(array('url' => $article_url))) {
          cache_set("hw:article:{$view}:{$type}:" . $article_id, $content, 'cache_highwire', $_SERVER['REQUEST_TIME'] + variable_get('intstrux_highwire_cache_lifetime', 300));
          return $content;  
        }       
      } else {
        return t('No !view content with this article', array('!view' => $view));
      }
    }
  }
  return FALSE;
}

/**
 * Parse a field value in form of "title [id:123]" and return 123
 *
 * @param $id
 *   Article PMID or DOI in form of "title [id:123]".
 * @return
 *   Int value of the PMID or DOI or NULL if not found.
 */
function intstrux_highwire_parse_identifier($id) {
  preg_match('/\[doi:([^\[]*)\]$/', $id, $matches);
  if (count($matches) == 2) {
    return $matches[1];
  }
  preg_match('/\[pmid:([^\[]*)\]$/', $id, $matches);
  if (count($matches) == 2) {
    return $matches[1];
  }
  return NULL;
}

/**
 * Parse PubMed ID
 *
 * @param $entry
 *   Article array entry.
 * @return
 *   Int value of the pmid or NULL if not found.
 */
function intstrux_highwire_parse_pmid($entry) {
  foreach($entry['nlm:article-id'] as $articleId) {
    if($articleId['@pub-id-type'] == 'pmid') {
      $pmid = $articleId['$'];
      return $pmid;
    }
  }
  return NULL;
}

/**
 * Parse DOI:
 *
 * @param $entry
 *   Article array entry.
 * @return
 *   Int value of the doi or NULL if not found.
 */
function intstrux_highwire_parse_doi($entry) {
  foreach($entry['nlm:article-id'] as $articleId) {
    if($articleId['@pub-id-type'] == 'doi') {
      $doi = $articleId['$'];
      return $doi;
    }
  }
  return NULL;
}

/**
 * Parse atom:link
 *
 * @param $entry
 *   Article array entry.
 * @param $view
 *   Link view: precis, abstract, full
 * @param $type
 *   Link file type: html, xml, pdf
 * @return
 *   String value of atom:link or NULL if not found.
 */
function intstrux_highwire_parse_link($entry, $view, $type) {
  foreach($entry['atom:link'] as $link) {
    if(strstr($link['@href'], "$view.$type") == "$view.$type") {
      return $link['@href'];
    }
  }
  return NULL;
}

/**
 * Parse content
 */
function intstrux_highwire_parse_content($element, $attr, $value, $content) {
  $attr = preg_quote($attr);
  $value = preg_quote($value);

  $tag_regex = '/<'.$element.'[^>]*'.$attr.'="'.$value.'">(.*?)<\\/'.$element.'>/si';

  preg_match($tag_regex, $content, $matches);
  return $matches[1];
}

/**
 * Remove tag
 */
function intstrux_highwire_remove_tag($element, $attr, $value, $content) {
  $attr = preg_quote($attr);
  $value = preg_quote($value);
  return preg_replace('!<'.$element.'\s+'.$attr.'="'.$value.'">.*?</'.$element.'>!is', '', $content);
}

/**
 * Retrieve all used fields.
 *
 * @return
 *   Array value of field_type options.
 */
function intstrux_highwire_fields_list() {
  $instances = field_info_instances();
  $field_types = field_info_field_types();
  $bundles = field_info_bundles();

  $rows = array();
  foreach ($instances as $entity_type => $type_bundles) {
    foreach ($type_bundles as $bundle => $bundle_instances) {
      foreach ($bundle_instances as $field_name => $instance) {
        $field = field_info_field($field_name);
        // Initialize the row if we encounter the field for the first time.
        if (!isset($rows[$field_name])) {
          $rows[$field_name][0] = $field_name;
          $rows[$field_name][1] = $field_types[$field['type']]['label'];
        }

        $rows[$field_name][2][] = $bundles[$entity_type][$bundle]['label'];
      }
    }
  }
  foreach ($rows as $field_name => $cell) {
    $rows[$field_name] = t('@type_label: @field_name (@used_in)', array(
      '@type_label' => $rows[$field_name][1],
      '@field_name' => $field_name,
      '@used_in' => implode(', ', $cell[2]),
    ));
  }
  
  return $rows;
}
